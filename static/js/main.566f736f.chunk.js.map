{"version":3,"sources":["actions/basketAction.js","reducers/basketReducer.js","reducers/index.js","components/productList.js","components/basket.js","App.js","serviceWorker.js","index.js"],"names":["ADD_PRODUCT","REMOVE_PRODUCT","addBasket","type","payload","removeBasket","initialState","basketList","Reducers","combineReducers","basket","state","arguments","length","undefined","action","updatedList","find","list","id","push","count","Object","objectSpread","forEach","splice","indexOf","ProductList","_this","this","props","products","map","product","index","react_default","a","createElement","className","key","name","onClick","e","addBasketAction","price","React","Component","connect","basketState","dispatch","bindActionCreators","Basket","basketPrice","style","paddingRight","removeBasketAction","marginBottom","color","store","createStore","applyMiddleware","ReduxThunk","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","es","productList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.566f736f.chunk.js","sourcesContent":["export const ADD_PRODUCT = \"ADD_PRODUCT\";\r\nexport const REMOVE_PRODUCT = \"REMOVE_PRODUCT\";\r\n\r\nexport function addBasket(type,payload) {\r\n    return {\r\n        type: ADD_PRODUCT,\r\n        payload:payload\r\n    }\r\n}\r\n\r\nexport function removeBasket(type,payload) {\r\n    return {\r\n        type: REMOVE_PRODUCT,\r\n        payload:payload\r\n    }\r\n}","import { ADD_PRODUCT, REMOVE_PRODUCT } from '../actions/basketAction';\r\n\r\nconst initialState = {\r\n    basketList: []\r\n};\r\n\r\nexport default function basketReducer(state = initialState, action){\r\n    let updatedList = state.basketList;\r\n    let count = 1;\r\n    switch(action.type) {\r\n        case ADD_PRODUCT:\r\n            let isExistItem = updatedList.find(list => {\r\n                return list.id === action.payload.id;                        \r\n            })            \r\n\t\t\tif(isExistItem === undefined) {\r\n                action.payload['count'] = count;\r\n                updatedList.push(action.payload);\r\n                \r\n            } else {\r\n                action.payload.count += count;\r\n            }\r\n            return {\r\n                ...state,\r\n                basketList: updatedList\r\n            };\r\n        case REMOVE_PRODUCT:\r\n            updatedList.forEach(list => {\r\n                if(list.id === action.payload.id) {\r\n                    if(list.count === 1) {\r\n                        updatedList.splice(updatedList.indexOf(list),1);\r\n                    } else {\r\n                        list.count -=1;\r\n                    }\r\n                }\r\n            })\r\n            return {\r\n                ...state,\r\n                basketList: updatedList\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport basketReducer from './basketReducer';\r\n\r\nconst Reducers = combineReducers({\r\n    basket: basketReducer,\r\n});\r\n\r\nexport default Reducers;\r\n\r\n","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { addBasket, ADD_PRODUCT} from \"../actions/basketAction\";\r\n\r\nclass ProductList extends React.Component {\r\n    \r\n    render(){\r\n        const list = this.props.products.map((product,index) => {\r\n            return (\r\n                <li className=\"product\" key={index}>\r\n                    {product.name}\r\n                    <button className=\"buttons\" onClick={(e) => {\r\n                        this.props.addBasketAction(ADD_PRODUCT,product)\r\n                    }}>+</button>    \r\n                    <span className=\"price\">{product.price}$ </span>\r\n                </li>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <h1>Product List ({this.props.products.length})</h1>\r\n                <ul>\r\n                    {list}\r\n                </ul>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        basketState: state.basket\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return bindActionCreators({\r\n        addBasketAction: addBasket\r\n    },dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ProductList);","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { removeBasket, REMOVE_PRODUCT  } from '../actions/basketAction';\r\n\r\nclass Basket extends React.Component {\r\n    render() {\r\n        let basketPrice = 0;\r\n        const basketList = \r\n        this.props.basketState.basketList.map((product,index)=> {\r\n            basketPrice += product.price * product.count;           \r\n            return (\r\n                <tr key={index}>\r\n                    <td style={{paddingRight:'25px'}}>\r\n                        {index+1} - {product.name} ({product.count})\r\n                    </td>\r\n                    <td>\r\n                        <button className=\"removeProduct\"\r\n                        onClick={(e) => this.props.removeBasketAction(REMOVE_PRODUCT,product)}\r\n                        >x</button>\r\n                    </td> \r\n                </tr>\r\n            )\r\n        });\r\n        return (\r\n            <div className=\"basket\">\r\n                <h4 style={{marginBottom:'0'}}>Basket</h4>\r\n                <hr/>\r\n                {\r\n                    basketList.length === 0 && <p style={{color:'red'}}>Your basket is empty.</p>\r\n                }\r\n                <table>\r\n                    <tbody>                        \r\n                        {basketList}\r\n                    </tbody>\r\n                </table>\r\n                Total Price: {basketPrice}$\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n        basketState: state.basket\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return bindActionCreators({\r\n        removeBasketAction: removeBasket\r\n        \r\n    },dispatch)\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Basket);","import React, { Component } from 'react';\r\nimport {createStore, applyMiddleware} from 'redux';\r\nimport {Provider} from 'react-redux';\r\nimport ReduxThunk from 'redux-thunk';\r\nimport Reducers from './reducers/index';\r\nimport ProductList from './components/productList';\r\nimport Basket from './components/basket';\r\nimport './App.css';\r\n\r\nconst store = createStore(Reducers, applyMiddleware(ReduxThunk));\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      products: [\r\n        { id:1, name:'Apple', price:10 },\r\n        { id:2, name:'Eggplant', price: 15 },\r\n        { id:3, name:'Pear', price:5 },\r\n        { id:4, name:'Patato', price: 12 },\r\n        { id:5, name:'Banana', price:18 }\r\n      ]\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <div className=\"general\">\r\n          <ProductList products= {this.state.products}/>\r\n          <Basket/>\r\n        </div>    \r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}